<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>MasaDev Blog</title><description>Welcome to my website!</description><link>https://masa-dev.net/</link><item><title>CloudRun上での.NET Identityセッション切れ問題の解決方法</title><link>https://masa-dev.net/post/6777b64ea98a21b9fbbc527c/</link><guid isPermaLink="true">https://masa-dev.net/post/6777b64ea98a21b9fbbc527c/</guid><description>.NETをCloudRun上にデプロイした環境で、頻繁にIdentityのセッションが切れてしまう現象が発生します。  この問題の解決方法について、多少の需要があると思いましたので、記事にしました。</description><pubDate>Fri, 03 Jan 2025 13:56:13 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;.NETをCloudRun上にデプロイした環境で、頻繁にIdentityのセッションが切れてしまう現象が発生します。&lt;/p&gt;
&lt;p&gt;この問題の解決方法について、多少の需要があると思いましたので、記事にしました。&lt;/p&gt;
&lt;h2&gt;セッションが切断される理由&lt;/h2&gt;
&lt;p&gt;.NET Identityではトークン認証を使用しており、サーバー側で暗号化したトークンをCookieでやりとりすることでセッションの状態を管理しています。&lt;/p&gt;
&lt;p&gt;この認証に使用される暗号化キーの保存先は、.NETのデータ保護システムに設定された場所に保存されます。デフォルトで暗号化キーは&lt;strong&gt;メモリ&lt;/strong&gt;に保存されます。&lt;/p&gt;
&lt;p&gt;一般的な単一のオンプレサーバーやVMなどでは、再起動などをしない限りメモリがリセットされないため、問題は発生しません。&lt;/p&gt;
&lt;p&gt;ただし、CloudRunのようなアクセス数によってコンテナが増減する場合は問題が発生します。 &lt;br&gt;
コンテナごとにメモリが別れているため、スケールインしてコンテナ数が0になった際にメモリがリセットされ、暗号化キーが失われてしまいます。 &lt;br&gt;
また、スケールアウトしてコンテナ数が増えた場合でも、新規作成されたコンテナのメモリに暗号化キーは保存されていないため、セッションが切れてしまいます。&lt;/p&gt;
&lt;p&gt;つまり、セッションが切断される理由は、コンテナ型Webサーバーでコンテナの増減によって、メモリ内に保存されている暗号化キーが失われてしまうからです。&lt;/p&gt;
&lt;h2&gt;暗号化キーを別ストレージ（DBなど）に保存する&lt;/h2&gt;
&lt;p&gt;上記の問題は、暗号化キーの保存先であるデータ保護システムのデフォルト保存先をメモリから別ストレージに変更することで解決できます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/aspnet/core/security/data-protection/implementation/key-storage-providers?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&quot;&gt;https://learn.microsoft.com/ja-jp/aspnet/core/security/data-protection/implementation/key-storage-providers?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は例として、暗号化キーの保存先をDB（Postgresql）に変更します。MySQLでも同じ方法で保存先を変更できます。&lt;/p&gt;
&lt;h3&gt;依存パッケージのインストール&lt;/h3&gt;
&lt;p&gt;まず、対象のプロジェクトに移動し、以下のパッケージをNugetからインストールします。バージョンは各プロジェクトに合わせます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Microsoft.AspNetCore.DataProtection.EntityFrameworkCore --version 9.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.EntityFrameworkCore/&quot;&gt;https://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.EntityFrameworkCore/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;コードの変更&lt;/h3&gt;
&lt;p&gt;次に、&lt;code&gt;Program.cs&lt;/code&gt;に以下の内容を追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs:Program.cs&quot;&gt;using Microsoft.AspNetCore.DataProtection;

// 略

builder.Services.AddDataProtection()
    .PersistKeysToDbContext&amp;lt;ApplicationDbContext&amp;gt;();

var app = builder.Build();
// 略
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;code&gt;ApplicationDbContext&lt;/code&gt;に&lt;code&gt;IDataProtectionKeyContext&lt;/code&gt;を継承し、&lt;code&gt;DataProtectionKeys&lt;/code&gt;プロパティを追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs:Data/ApplicationDbContext.cs&quot;&gt;using Microsoft.AspNetCore.DataProtection.EntityFrameworkCore;

public class ApplicationDbContext : IdentityDbContext, IDataProtectionKeyContext
{
    // 略

    public DbSet&amp;lt;DataProtectionKey&amp;gt; DataProtectionKeys { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;マイグレーション反映&lt;/h3&gt;
&lt;p&gt;上記の追加が完了したら、マイグレーションの作成、DB反映をします。&lt;br&gt;
下記コードはサンプルになります。マイグレーションコードは既存コードに合わせて実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# マイグレーションの発行
dotnet ef migrations add AddDataProtectionKeysTable --context ApplicationDbContext --output-dir Data/Migrations

# マイグレーションをデータベースに反映
dotnet ef database update --context ApplicationDbContext
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;確認&lt;/h3&gt;
&lt;p&gt;これでDBに &lt;code&gt;DataProtectionKeys&lt;/code&gt; というテーブルが作成されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/d408e1d2-2147-4985-95fe-edcc1a53147a/dataprotectonkeytable1.png&quot; alt=&quot;dataprotectonkeytable1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;ログイン時に作成された暗号化キーが保存されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/de1eae86-6ef9-423a-ade2-7165ec6bb4f1/dataprotectonkeytable.png&quot; alt=&quot;dataprotectonkeytable.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;終わりに&lt;/h2&gt;
&lt;p&gt;結構前からこの問題について調査していましたが、検索の仕方が悪かったのか、解決まで実は1年くらいかかっています。&lt;/p&gt;
&lt;p&gt;それまでは、外部の認証プロバイダを使用するなりして誤魔化していましたが、記事の解決策のおかげで外部認証に依存せずに済みそうでハッピーです。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/aspnet/core/security/data-protection/implementation/key-storage-providers?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&quot;&gt;ASP.NET Core でのキー ストレージ プロバイダー | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>NeoVim kickstartの設定説明メモ（KeyMap編）</title><link>https://masa-dev.net/post/670280a2e016366845bc387a/</link><guid isPermaLink="true">https://masa-dev.net/post/670280a2e016366845bc387a/</guid><description>設定内容（KeyMap） 検索結果のハイライト削除  検索結果のハイライトを`ESC`キーで解除する。 デフォルトでは`/`で検索を確定した後、別の検索をしないとそのハイライトが残り続ける。結構邪魔。</description><pubDate>Sun, 06 Oct 2024 15:40:44 GMT</pubDate><content:encoded>&lt;p&gt;前回の続き&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://masa-dev.net/post/66e23631e6213d85f24fb260&quot;&gt;NeoVim kickstartの設定説明メモ（オプション編）&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;設定内容（KeyMap）&lt;/h2&gt;
&lt;h3&gt;検索結果のハイライト削除&lt;/h3&gt;
&lt;p&gt;検索結果のハイライトを&lt;code&gt;ESC&lt;/code&gt;キーで解除する。&lt;br&gt;
デフォルトでは&lt;code&gt;/&lt;/code&gt;で検索を確定した後、別の検索をしないとそのハイライトが残り続ける。結構邪魔。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Clear highlights on search when pressing &amp;lt;Esc&amp;gt; in normal mode
--  See `:help hlsearch`
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;Esc&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;nohlsearch&amp;lt;CR&amp;gt;&apos;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;診断ツールを表示する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; + &lt;code&gt;q&lt;/code&gt; で診断ツールを分割ウインドウとして表示する。&lt;br&gt;
診断ツールはLSPのアラートなどの表示のこと。VSCodeでいう「問題」タブ。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Diagnostic keymaps
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;leader&amp;gt;q&apos;, vim.diagnostic.setloclist, { desc = &apos;Open diagnostic [Q]uickfix list&apos; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;ターミナルモードからノーマルモードに戻る&lt;/h3&gt;
&lt;p&gt;ターミナルモードからノーマルモードに戻るためのショートカット。&lt;br&gt;
通常のノーマルモードに戻るコマンドは&lt;code&gt;Ctrl \&lt;/code&gt; &lt;code&gt;Ctrl n&lt;/code&gt; になっている。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Exit terminal mode in the builtin terminal with a shortcut that is a bit easier
-- for people to discover. Otherwise, you normally need to press &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;, which
-- is not what someone will guess without a bit more experience.
--
-- NOTE: This won&apos;t work in all terminal emulators/tmux/etc. Try your own mapping
-- or just use &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt; to exit terminal mode
vim.keymap.set(&apos;t&apos;, &apos;&amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt;&apos;, &apos;&amp;lt;C-\\&amp;gt;&amp;lt;C-n&amp;gt;&apos;, { desc = &apos;Exit terminal mode&apos; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;矢印キーの無効化&lt;/h3&gt;
&lt;p&gt;ノーマルモードでの矢印キーを無効化する。矢印キーを無効化したい場合はコメントアウトを外す。&lt;br&gt;
矢印キーでの移動を絶対に許さないマン向け設定。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- TIP: Disable arrow keys in normal mode
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;left&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use h to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;right&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use l to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;up&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use k to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;down&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use j to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;分割ウインドウ移動&lt;/h3&gt;
&lt;p&gt;分割ウインドウを&lt;code&gt;Ctrl h&lt;/code&gt;, &lt;code&gt;Ctrl l&lt;/code&gt;, &lt;code&gt;Ctrl j&lt;/code&gt;, &lt;code&gt;Ctrl k&lt;/code&gt; で移動できるようにする。&lt;br&gt;
ちなみにウインドウ分割は以下の方法でできる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl w&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; 垂直分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl w&lt;/code&gt; + &lt;code&gt;s&lt;/code&gt; 水平分割&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Keybinds to make split navigation easier.
--  Use CTRL+&amp;lt;hjkl&amp;gt; to switch between windows
--
--  See `:help wincmd` for a list of all window commands
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-h&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-h&amp;gt;&apos;, { desc = &apos;Move focus to the left window&apos; })
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-l&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-l&amp;gt;&apos;, { desc = &apos;Move focus to the right window&apos; })
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-j&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-j&amp;gt;&apos;, { desc = &apos;Move focus to the lower window&apos; })
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-k&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-k&amp;gt;&apos;, { desc = &apos;Move focus to the upper window&apos; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;設定内容（Basic Autocommands）&lt;/h2&gt;
&lt;h3&gt;ヤンク部分のハイライト&lt;/h3&gt;
&lt;p&gt;NeovimのAutocommandは、特定のイベントが発生したときに自動的にコマンドを実行する機能のこと。&lt;/p&gt;
&lt;p&gt;以下の設定では&lt;code&gt;TextYankPost&lt;/code&gt;というイベントで発火し、ヤンク時にヤンクした文字範囲をハイライトする。&lt;br&gt;
&lt;code&gt;TextYankPost&lt;/code&gt;はテキストをヤンクした後に実行されるイベントのこと。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Highlight when yanking (copying) text
--  Try it with `yap` in normal mode
--  See `:help vim.highlight.on_yank()`
vim.api.nvim_create_autocmd(&apos;TextYankPost&apos;, {
  desc = &apos;Highlight when yanking (copying) text&apos;,
  group = vim.api.nvim_create_augroup(&apos;kickstart-highlight-yank&apos;, { clear = true }),
  callback = function()
    vim.highlight.on_yank()
  end,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/8783fb06-b261-4f4f-b3a3-0f4bf91abab4/basic-autocmd-yank-highlight.gif&quot; alt=&quot;basic-autocmd-yank-highlight.gif&quot;&gt;&lt;/p&gt;
&lt;h2&gt;終わりに&lt;/h2&gt;
&lt;p&gt;次回は長大なpluginなので投稿できるかな…?&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://neovim.io/doc/user/autocmd.html&quot;&gt;https://neovim.io/doc/user/autocmd.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>NeoVim kickstartの設定説明メモ（オプション編）</title><link>https://masa-dev.net/post/66e23631e6213d85f24fb260/</link><guid isPermaLink="true">https://masa-dev.net/post/66e23631e6213d85f24fb260/</guid><description>最近NeoVimのキックスタートを使ってみたところ、意外と使いやすかったので、そのキックスタートの設定の内容のまとめ</description><pubDate>Thu, 12 Sep 2024 00:41:01 GMT</pubDate><content:encoded>&lt;p&gt;最近NeoVimのキックスタートを使ってみたところ、意外と使いやすかったので、そのキックスタートの設定の内容のまとめ&lt;/p&gt;
&lt;p&gt;↓nvim kickstart&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim&quot;&gt;https://github.com/nvim-lua/kickstart.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;続くかわからないけど、今回はオプション周りをまとめる&lt;/p&gt;
&lt;h2&gt;設定内容&lt;/h2&gt;
&lt;h3&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;キーの設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;キーの設定を半角スペースにする&lt;br&gt;
デフォルトはバックスラッシュ（&lt;code&gt;\&lt;/code&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Set &amp;lt;space&amp;gt; as the leader key
-- See `:help mapleader`
--  NOTE: Must happen before plugins are loaded (otherwise wrong leader will be used)
vim.g.mapleader = &apos; &apos;
vim.g.maplocalleader = &apos; &apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Nerd Fontに対応しているか&lt;/h3&gt;
&lt;p&gt;Nerd Font対応していれば &lt;code&gt;true&lt;/code&gt; にする&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Set to true if you have a Nerd Font installed and selected in the terminal
vim.g.have_nerd_font = false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;行番号の有効化&lt;/h3&gt;
&lt;p&gt;相対的な行番号も設定できるとのこと&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Make line numbers default
vim.opt.number = true
-- You can also add relative line numbers, to help with jumping.
--  Experiment for yourself to see if you like it!
-- vim.opt.relativenumber = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;マウスモードを有効化&lt;/h3&gt;
&lt;p&gt;有効化するとマウスでのカーソル位置の移動ができる様になる&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Enable mouse mode, can be useful for resizing splits for example!
vim.opt.mouse = &apos;a&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;モードを表示するかの設定&lt;/h3&gt;
&lt;p&gt;すでにステータスラインに表示しているため表示しないとのこと&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Don&apos;t show the mode, since it&apos;s already in the status line
vim.opt.showmode = false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;クリックボードの同期&lt;/h3&gt;
&lt;p&gt;OSとのクリップボード同期を有効化するが、起動時間が長くなるため&lt;code&gt;UiEnter&lt;/code&gt;の後に設定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Sync clipboard between OS and Neovim.
--  Schedule the setting after `UiEnter` because it can increase startup-time.
--  Remove this option if you want your OS clipboard to remain independent.
--  See `:help &apos;clipboard&apos;`
vim.schedule(function()
  vim.opt.clipboard = &apos;unnamedplus&apos;
end)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;ブレークインデントの有効化&lt;/h3&gt;
&lt;p&gt;有効にすると改行時にインデントされた状態になる&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Enable break indent
vim.opt.breakindent = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Undoファイルの有効化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt;コマンドのでのundoを記録する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Save undo history
vim.opt.undofile = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;検索時の大文字・小文字の無視設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;\C&lt;/code&gt;か大文字が含まれていない限りは区別せずに検索する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Case-insensitive searching UNLESS \C or one or more capital letters in the search term
vim.opt.ignorecase = true
vim.opt.smartcase = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;サインカラムの有効化&lt;/h3&gt;
&lt;p&gt;サインカラムをデフォルトに設定する&lt;br&gt;
サインカラムは、行番号の左に表示される記号の行のこと&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Keep signcolumn on by default
vim.opt.signcolumn = &apos;yes&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;スワップファイルの更新時間&lt;/h3&gt;
&lt;p&gt;この時間の間 (ミリ秒単位) 入力がなければ、スワップファイルがディスクに書き込まれる（参照：&lt;a href=&quot;https://vim-jp.org/vimdoc-ja/options.html&quot;&gt;https://vim-jp.org/vimdoc-ja/options.html&lt;/a&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Decrease update time
vim.opt.updatetime = 250
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;キーマッピングシーケンスの待ち時間&lt;/h3&gt;
&lt;p&gt;キーマッピングシーケンスの待ち時間を減らす&lt;br&gt;
例）&lt;code&gt;&amp;lt;Leader&amp;gt;w&lt;/code&gt;のマッピングの場合、&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;入力後の待ち時間を設定する&lt;br&gt;
which-keyのポップアップ表示を早めるために0.3秒に設定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Decrease mapped sequence wait time
-- Displays which-key popup sooner
vim.opt.timeoutlen = 300
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;分割画面の方向設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;横に分割する場合は、右に新しいウインドウを作成&lt;/li&gt;
&lt;li&gt;縦に分割する場合は、下に新しいウインドウを作成&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Configure how new splits should be opened
vim.opt.splitright = true
vim.opt.splitbelow = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;リストモードの有効化&lt;/h3&gt;
&lt;p&gt;有効化した場合、&lt;code&gt;listchars&lt;/code&gt;にある文字が反映される&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Sets how neovim will display certain whitespace characters in the editor.
--  See `:help &apos;list&apos;`
--  and `:help &apos;listchars&apos;`
vim.opt.list = true
vim.opt.listchars = { tab = &apos;» &apos;, trail = &apos;·&apos;, nbsp = &apos;␣&apos; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;コマンド結果のプレビュー&lt;/h3&gt;
&lt;p&gt;コマンドの結果を分割画面でプレビューできる&lt;br&gt;
置換（&lt;code&gt;:%s/&lt;/code&gt;）がわかりやすい&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Preview substitutions live, as you type!
vim.opt.inccommand = &apos;split&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;カーソル行の強調表示&lt;/h3&gt;
&lt;p&gt;カーソルの行がどこにあるかわかる様にする&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Show which line your cursor is on
vim.opt.cursorline = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;カーソルの上下に表示する行数の設定&lt;/h3&gt;
&lt;p&gt;カーソルの上下に表示する画面行数の最小値を設定する&lt;/p&gt;
&lt;p&gt;開始・終了行以外では、設定された行数より下にカーソルを移動するとスクロールする&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Minimal number of screen lines to keep above and below the cursor.
vim.opt.scrolloff = 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://vim-jp.org/vimdoc-ja/map.html&quot;&gt;https://vim-jp.org/vimdoc-ja/map.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://vim-jp.org/vimdoc-ja/options.html&quot;&gt;https://vim-jp.org/vimdoc-ja/options.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>.NET MVCをSupabase + Cloud Runで動かしてみる</title><link>https://masa-dev.net/post/6425b90086e7de37b82ff1a6/</link><guid isPermaLink="true">https://masa-dev.net/post/6425b90086e7de37b82ff1a6/</guid><description>少し前に話題になっていた Supabase を最近になって知りました。 SupabaseはFirebaseの代替手段と謳っており、Postgresのデータベースや認証、ストレージなどの機能を提供</description><pubDate>Fri, 31 Mar 2023 18:25:05 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;少し前に話題になっていた Supabase を最近になって知りました。&lt;br&gt;
SupabaseはFirebaseの代替手段と謳っており、Postgresのデータベースや認証、ストレージなどの機能を提供するプラットフォームのことです。&lt;/p&gt;
&lt;p&gt;個人的にPosrgresデータベースを無料枠で使用することができる点が素晴らしいと思っています。&lt;br&gt;
FirebaseのNoSQLもいいですが、EntityFrameworkとの相性は悪くて開発体験がよくないですから、あまり使いたくはありません。また、Cloud SQLや RDSのようなフルマネージドデータベースを使用するという選択肢もありますが、いかんせんコストが高いので、個人開発には向きません。&lt;/p&gt;
&lt;p&gt;そんなこんなでCloudRun + Supabaseを使用すれば、実質無料で.NETの環境を作ることができるのではないかと思って、試してみました。&lt;/p&gt;
&lt;h2&gt;インフラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Run&lt;/li&gt;
&lt;li&gt;Supabase (Postgres)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;.NET MVC Identity&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Supabaseでプロジェクト作成&lt;/h2&gt;
&lt;p&gt;ログインは割愛します。&lt;/p&gt;
&lt;p&gt;まず、プロジェクトを作成します。（データベースパスワードは控えておく）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/e842523a-063b-4fb9-abaa-7e9940b1b4a8/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-03-31002638.png&quot; alt=&quot;スクリーンショット2023-03-31002638.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;プロジェクトを作成してプロジェクト詳細に入ったら、左メニューの設定（Project Settings）&amp;gt;Databaseに移動します。&lt;/p&gt;
&lt;p&gt;Connection stringの.NETタブを選択すると.NETアプリ用の接続設定を取得できます。&lt;br&gt;
この時点でSQLクライアントソフトから接続確認ができました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/cdd387f3-fc4d-4580-9067-56e57c16fb6a/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-03-31010948.png&quot; alt=&quot;スクリーンショット2023-03-31010948.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;.NET Core Identity環境の作成&lt;/h2&gt;
&lt;p&gt;.NETの環境を作成します。&lt;br&gt;
開発環境はVSCodeでDev Container拡張機能を使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dockerfile:Dockerfile&quot;&gt;FROM mcr.microsoft.com/dotnet/sdk:7.0 AS runtime

WORKDIR /app

COPY ./src .

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    git \
    vim

RUN dotnet tool install --global dotnet-ef --version 7.0
RUN dotnet tool install --global dotnet-aspnet-codegenerator --version 7.0

ENV PATH $PATH:/root/.dotnet/tools
ENV TZ Asia/Tokyo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-yml:docker-compose.yml&quot;&gt;version: &apos;3.7&apos;

services:
  supabase_web:
    container_name: &amp;quot;supabase_web&amp;quot;
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - &amp;quot;50001:8080&amp;quot;
    working_dir: /app/
    tty: true
    volumes:
      - ./src/:/app/

  supabase_db:
    container_name: &amp;quot;supabase_db&amp;quot;
    image: postgres:13-bullseye
    ports:
      - &amp;quot;55432:5432&amp;quot;
    volumes:
      - .dbstore:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=A9AbbsJiNXUA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mkdir src&lt;/code&gt;でsrcフォルダを作成したあとに、コマンドパレットを開き、&lt;code&gt;&amp;gt;Dev Containers: Open Folder in Container...&lt;/code&gt;を実行してコンテナを起動します。&lt;/p&gt;
&lt;p&gt;次に、下記コマンドで.NET MVCテンプレートを作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /
dotnet new mvc --auth Individual -uld -o app -n SupabaseTest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;併せて、gitignoreファイルも作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /app &amp;amp;&amp;amp; dotnet new gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成したら、下記コマンドでPostgresのNugetパッケージをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PostgreSQLに接続できるように&lt;code&gt;Program.cs&lt;/code&gt;ファイルを編集します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs:Program.cs&quot;&gt;using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using SupabaseTest.Data;

var builder = WebApplication.CreateBuilder(args);

builder.WebHost.UseUrls(&amp;quot;http://0.0.0.0:8080&amp;quot;);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;) ?? throw new InvalidOperationException(&amp;quot;Connection string &apos;DefaultConnection&apos; not found.&amp;quot;);
builder.Services.AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
    options.UseNpgsql(connectionString));

// 略 //
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;appSettings.Develop.json&lt;/code&gt;を以下のように変更します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json:appSettings.Develop.json&quot;&gt;{
  &amp;quot;DetailedErrors&amp;quot;: true,
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;Host= supabase_db;Port=5432;Database=postgres;Username=postgres;Password=A9AbbsJiNXUA&amp;quot;
  },
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にマイグレーション関連を整理します。&lt;/p&gt;
&lt;p&gt;今のままではマイグレーションがSQL Server用のものとなっており、updateを行ってもエラーが発生します。そのため、下記コマンドで初期マイグレーションを再発行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /app
rm Data/Migrations/*.cs
# マイグレーションの発行
dotnet ef migrations add InitialCreate --context ApplicationDbContext --output-dir Data/Migrations

# マイグレーションをデータベースに反映
dotnet ef database update --context ApplicationDbContext
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にデバッグできるようにVSCodeの左メニューから、「実行とデバッグ」を開き、「launch.jsonファイルを作成」し、.NET 5+ .NET MVCを選択して&lt;code&gt;launch.json&lt;/code&gt;を自動生成します。&lt;br&gt;
また、VSCodeの拡張機能で「C# &lt;code&gt;ms-dotnettools.csharp&lt;/code&gt;」をインストールしておきます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;launch.json&lt;/code&gt;ファイルが自動生成できたら、&lt;code&gt;F5&lt;/code&gt;キーを押してデバッグを開始します。&lt;/p&gt;
&lt;p&gt;デバッグが実行出来たら、&lt;a href=&quot;http://localhost:50001/&quot;&gt;http://localhost:50001/&lt;/a&gt; でアクセスできます。&lt;/p&gt;
&lt;p&gt;データベースに接続できているか確認するために適当にユーザーを登録して、「Click here to confirm your account」をクリックします。その後、ログインができていたらDBは接続できています。&lt;/p&gt;
&lt;p&gt;これでローカルで開発できる環境ができました。&lt;/p&gt;
&lt;h2&gt;本番環境にマイグレーション&lt;/h2&gt;
&lt;p&gt;CloudRunにデプロイした際にSupabaseのPostgreに接続できるようにする必要があります。&lt;/p&gt;
&lt;p&gt;まず、Postgresの接続情報を記載した&lt;code&gt;appsettings.Production.json&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json:appsettings.Production.json&quot;&gt;{
  &amp;quot;DetailedErrors&amp;quot;: false,
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;User Id=postgres;Password=XXXXXXXX;Server=db.xxxxxxxxxxxxxxxxxx.supabase.co;Port=5432;Database=postgre&amp;quot;
  },
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に下記のコマンドでsupabaseのデータベースを更新します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /app
export ASPNETCORE_ENVIRONMENT=&amp;quot;Production&amp;quot;
dotnet ef database update
export ASPNETCORE_ENVIRONMENT=&amp;quot;Development&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Cloud Runにデプロイ&lt;/h2&gt;
&lt;p&gt;まず、Cloud Runとは、サーバーレスのプラットフォームで、コンテナベースのWebアプリケーションを実行させることができます。&lt;/p&gt;
&lt;p&gt;要はDockerなどのコンテナからアプリケーションを実行するため、任意の言語の環境を使用することができます。また、Dockerベースの開発をする場合、ローカルの環境とCloud Runの環境を同じ環境にすることができるメリットがあります。&lt;/p&gt;
&lt;p&gt;先ほど作成した.NETアプリケーションをCloud Runにデプロイします。&lt;/p&gt;
&lt;h3&gt;GCPのロール変更&lt;/h3&gt;
&lt;p&gt;GCPのサービスアカウントからCloudRunにデプロイするため、権限を付与する必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cloud Buildに移動して、左メニューの「設定」に移動&lt;/li&gt;
&lt;li&gt;「Cloud Run」のステータスを有効に変更&lt;/li&gt;
&lt;li&gt;モーダルの「すべてのサービス アカウントにアクセス権を付与」&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Cloud buildでイメージをビルドする&lt;/h3&gt;
&lt;p&gt;gcloud sdkがローカルにインストールされている前提で話します。&lt;/p&gt;
&lt;p&gt;Cloud Runでデプロイするためにはデプロイするコンテナのイメージが必要なので、Cloud Buildを使用してCloud Registryにイメージを保存します。&lt;/p&gt;
&lt;p&gt;まず、デプロイ用のDocker設定ファイルである&lt;code&gt;CloudRun.Dockerfile&lt;/code&gt;を作成します。&lt;br&gt;&lt;br&gt;
注意点としては、CloudRunにデプロイする場合は &lt;strong&gt;必ず8080ポートを公開する&lt;/strong&gt;ことです。そうしないとデプロイ時にエラーが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dockerfile:CloudRun.Dockerfile&quot;&gt;FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build

WORKDIR /app
COPY ./src .

RUN dotnet publish -c Release -o dist

FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS runtime

WORKDIR /app
COPY --from=build /app/dist .

ENV TZ Asia/Tokyo
ENV ASPNETCORE_ENVIRONMENT Production

ENV PORT=8080
EXPOSE 8080

ENTRYPOINT [&amp;quot;dotnet&amp;quot;, &amp;quot;SupabaseTest.dll&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にビルド設定の&lt;code&gt;cloudbuild.yml&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yml:cloudbuild.yml&quot;&gt;steps:
# Build the container image
- name: &apos;gcr.io/cloud-builders/docker&apos;
  args: [&apos;build&apos;, &apos;-t&apos;, &apos;gcr.io/PROJECT_ID/IMAGE&apos;, &apos;-f&apos;, &apos;CloudRun.Dockerfile&apos;, &apos;.&apos;]
# Push the container image to Container Registry
- name: &apos;gcr.io/cloud-builders/docker&apos;
  args: [&apos;push&apos;, &apos;gcr.io/PROJECT_ID/IMAGE&apos;]
# Deploy container image to Cloud Run
- name: &apos;gcr.io/google.com/cloudsdktool/cloud-sdk&apos;
  entrypoint: gcloud
  args: [&apos;run&apos;, &apos;deploy&apos;, &apos;SERVICE_NAME&apos;, &apos;--image&apos;, &apos;gcr.io/PROJECT_ID/IMAGE&apos;, &apos;--region&apos;, &apos;REGION&apos;, &apos;--allow-unauthenticated&apos;]
images:
- gcr.io/PROJECT_ID/IMAGE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cloudbuild.yml&lt;/code&gt;の各項目を変換しておいてください。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変換前&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PROJECT_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロジェクトのID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IMAGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Contaier Registoryに保存する名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SERVICE_NAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デプロイサービスの名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;REGION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デプロイ先のリージョン&lt;br&gt;東京なら&lt;code&gt;asia-northeast1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;デプロイする&lt;/h3&gt;
&lt;p&gt;ローカル環境で&lt;code&gt;CloudRun.Dockerfile&lt;/code&gt;のあるフォルダで以下のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gcloud builds submit ./ --config cloudbuild.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特にエラーがなければデプロイの成功です。&lt;/p&gt;
&lt;p&gt;認証の機能が使用できていたので、データベースにも接続できていますね！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/8e50b2a3-edd8-4f72-9ae7-781009eaaa31/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-04-01001455.png&quot; alt=&quot;スクリーンショット2023-04-01001455.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;実際にCloud RunとSupabaseを使用することで.NETの環境を限りなく安くなるように作成できました。ただ、今回作成した.NETアプリは、Cloud Runの特性上、十数分程度でログインセッションが切れてしまうため、セッションをインメモリからデータベースに保存するなどの対応が必要になりそうです。&lt;br&gt;&lt;br&gt;
Supabaseのプロジェクトは無料枠で2つのみなので、数を作成できませんが、個人開発にはもっていこいのサービスだと思います。&lt;/p&gt;
&lt;p&gt;Cloud Runなので.NET Coreの環境にとどまらず、頑張ればWordpressの環境も作成できるんじゃないかと思います。ほぼ無料でWordpress環境は夢があっていいですね。&lt;/p&gt;
&lt;p&gt;さいごに、サクッと記事が書けるだろうと思って書き始めましたが、思ったより基本的な説明に時間をとってしまう形になってしまいました。記事を作成するのは難しいですね...&lt;/p&gt;
</content:encoded></item><item><title>Windowsのbash環境を整備していく</title><link>https://masa-dev.net/post/63d6a6932772b5781daab492/</link><guid isPermaLink="true">https://masa-dev.net/post/63d6a6932772b5781daab492/</guid><description>Windowsのbash環境を整備していく</description><pubDate>Sun, 29 Jan 2023 17:50:08 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近（一年前）に引っ越してから Windows 環境を一新したので、 シェル関連で今までやってきたことをまとめようとおもいます。&lt;/p&gt;
&lt;h2&gt;実行ターミナル&lt;/h2&gt;
&lt;p&gt;まず、シェルの実行環境は、Windows Terminal と &lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt; を使用しています。&lt;br&gt;&lt;br&gt;
気分でどちらを使うか決めているのですが、使いやすさでいうなら Windows Terminal の方がいいです。Windows の Hyper は画面分割ができますが、コピーとペーストのショートカットが通常と違って使いにくいです。&lt;/p&gt;
&lt;p&gt;Hyperにはポケモンのテーマなどもあるので、（見にくくなりますが）気になる人は使ってみてもいいかもしれないですね。&lt;/p&gt;
&lt;h2&gt;シェル&lt;/h2&gt;
&lt;p&gt;基本的に Git Bash を使用しています。&lt;br&gt;&lt;br&gt;
Git Bash はGitをインストールする勝手にインストールされているので、使用している人も多いんじゃないでしょうか。&lt;/p&gt;
&lt;p&gt;bash でできることが大体できますし、デフォルトでgitのブランチが表示されている点が優秀です。&lt;/p&gt;
&lt;p&gt;最初はPowerShellを使用していましたが、&lt;code&gt;ls&lt;/code&gt;コマンドが使用できなかったり、専用のコマンドがよくわからなかったりと、不満があったので結果として Git Bash を使う形に落ち着いています。&lt;/p&gt;
&lt;h2&gt;コマンド&lt;/h2&gt;
&lt;p&gt;Git Bashを使いやすくするため、いくつかのコマンドを使えるようにしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;li&gt;peco&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれ説明していきます。&lt;/p&gt;
&lt;h3&gt;Vim&lt;/h3&gt;
&lt;p&gt;名前だけは聞いたことがある人も多いんじゃないでしょうか。Vim はコマンドラインエディタの一種であり、アプリの切り替えを行わずにコマンドラインから直接ファイルの編集を行うことができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.bashrc&lt;/code&gt;などのちょっとした設定ファイルなどの編集を行う際などによく使っています。&lt;br&gt;&lt;br&gt;
かなり癖のある UI をしていますが、住めば都というように、慣れれば VS Code で Vim の拡張機能を入れたくなるほどになります。&lt;/p&gt;
&lt;p&gt;また、プラグインをインストールすることで、デフォルトのカラースキームを変更できたり、エクスプローラーのような機能を追加することもできます。その設定などは機会があれば別の記事にしようと思います。&lt;/p&gt;
&lt;h3&gt;Peco&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/peco/peco&quot;&gt;peco&lt;/a&gt; は与えられた入力を視覚的に選択できるコマンドです。&lt;/p&gt;
&lt;p&gt;基本的なコマンドの使用方法は、与えられた入力リストをselectのように選択させて、選択させたものを文字列として出力します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# ls の出力リストから選択させる
ls | peco
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述のような使い方は基本的にはせずに、&lt;code&gt;.bash_history&lt;/code&gt;の内容を読むようにして、&lt;code&gt;Ctrl + r&lt;/code&gt;などのバインディングでコマンドの履歴検索をできるようにしています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/1b9d5393-50b4-46d6-9ce5-0ecd5eb384e3/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-01-30020344.png&quot; alt=&quot;スクリーンショット2023-01-30020344.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;さいごに&lt;/h2&gt;
&lt;p&gt;vim のプラグインなどを考えて記事を書き始めましたが、後からvim関係は別に分けた方がいいのではないかと思い、vim関係を書かなくした結果、思ったより記事の内容が薄くなってしまいました。&lt;/p&gt;
&lt;p&gt;まぁ、見てる人そんなにいないし、ここまで見ている人いないから、問題なし！ 安全確認ヨシ！&lt;/p&gt;
</content:encoded></item><item><title>FirebaseのCIデプロイが突然落ちるようになった</title><link>https://masa-dev.net/post/633f007e2c3aa4b59313ccd1/</link><guid isPermaLink="true">https://masa-dev.net/post/633f007e2c3aa4b59313ccd1/</guid><description>本サイトの環境はFirebaseにデプロイしており、GitHub Actionsで自動でデプロイするようにしていますが、突然エラーが発生して落ちるようになりました。</description><pubDate>Thu, 06 Oct 2022 17:08:31 GMT</pubDate><content:encoded>&lt;h2&gt;エラー発生&lt;/h2&gt;
&lt;p&gt;本サイトの環境はFirebaseにデプロイしており、GitHub Actionsで自動でデプロイするようにしていますが、突然エラーが発生して落ちるようになりました。&lt;/p&gt;
&lt;h2&gt;エラー内容&lt;/h2&gt;
&lt;p&gt;エラー内容は以下です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Error: Failed to list functions for *******

The process &apos;/usr/local/bin/npx&apos; failed with exit code 1
Error: The process &apos;/usr/local/bin/npx&apos; failed with exit code 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さすがにさっきのだけじゃあ何もわからないので少し探してみる。&lt;/p&gt;
&lt;h3&gt;エラー1&lt;/h3&gt;
&lt;p&gt;調べると以下のエラーが発生していました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;[2022-10-06T16:20:32.871Z] [functions] HTTP Error: 403, Cloud Functions API has not been used in project 700***** before or it is disabled. Enable it by visiting 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーの少し前になんかそれっぽいことが書いてありますね。「Cloud Functions API」とやらが有効化されていないから有効化しろとのことです。&lt;/p&gt;
&lt;p&gt;とりあえず、GCPにログインして、対象のプロジェクトで「Cloud Functions API」を有効化します。&lt;/p&gt;
&lt;h3&gt;エラー2&lt;/h3&gt;
&lt;p&gt;先ほどのエラーはなくなりましたが、今度は以下のようなエラーが発生。（もともとあったかもしんない）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Error: HTTP Error: 403, Permission &apos;cloudfunctions.functions.list&apos; denied on &apos;projects/**********/locations/-/functions&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;firebaseのバグっぽい？調べると以下のIssueにあたりました。&lt;br&gt;
&lt;a href=&quot;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203&quot;&gt;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一番評価がありそうな解決策を試してみます。&lt;br&gt;
&lt;a href=&quot;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203#issuecomment-1127732956&quot;&gt;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203#issuecomment-1127732956&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;方法は以下の通りです&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「IAMと管理 &amp;gt; IAM」に移動して&lt;code&gt;github-actions&lt;/code&gt;から始まるアカウントを探す&lt;/li&gt;
&lt;li&gt;鉛筆マークで「別のロールを追加」から、&lt;code&gt;Cloud Functions 閲覧者&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;正しいプロジェクトにいるか念のために確認&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;保存してGithubActionsを再実行したところ、うまく動作しました。&lt;/p&gt;
&lt;h2&gt;解決策・まとめ&lt;/h2&gt;
&lt;p&gt;どうやら、GCP関連の権限不足だった模様です。&lt;br&gt;
どうしていきなり発生したのかはわかりません。本日（2022/10/6）にfirebaseから規約変更などのメールはありましたがそれが原因とは思えません。（GithubのIssueは数か月前のもの）&lt;br&gt;
利用からちょうど３か月経とうかというところなので、無料期間外だからでしょうか。&lt;/p&gt;
&lt;p&gt;まぁ、よくわからんけど解決したからヨシ！&lt;/p&gt;
&lt;p&gt;2022/10/7 追記&lt;br&gt;
Issueを追ってみたら、昨日あたりからこのエラーが発生したようです。&lt;br&gt;
具体的な原因についてはわかりませんでした。&lt;/p&gt;
&lt;p&gt;今回の問題は、以下の二つの操作で解決できました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cloud Functions API&lt;/code&gt;の有効化&lt;/li&gt;
&lt;li&gt;アカウントのロール追加&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Vue3のVue Test Utils で地獄をみた（Chart.js部門）</title><link>https://masa-dev.net/post/632f56d68834f719d021b2d6/</link><guid isPermaLink="true">https://masa-dev.net/post/632f56d68834f719d021b2d6/</guid><description>はじめはVuexのストアが問題で発生していると思い込んで、ひたすらモック作成に取り組んでいたけど一向にエラー文が変わらない絶望 そんなこんなで、色々いじくりまわしてるとあることに気づいた</description><pubDate>Sat, 24 Sep 2022 19:13:26 GMT</pubDate><content:encoded>&lt;p&gt;あまり気力がないのでかなり端折って書きます。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vue@3.2.19&lt;/li&gt;
&lt;li&gt;vuex@4.0.2&lt;/li&gt;
&lt;li&gt;chart.js@2.9.4&lt;/li&gt;
&lt;li&gt;@vue/test-utils@2.0.0-rc.15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで関係のなさそうな一般ライブラリが入っているってことは、つまりそういうことなんです。&lt;/p&gt;
&lt;h2&gt;問題の部分&lt;/h2&gt;
&lt;p&gt;本当ならもっと長いけど、問題となった部分はここだけ&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html:src/components/Chart.vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;chart&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;myChart&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import Chart from &amp;quot;chart.js&amp;quot;;
import &amp;quot;chartjs-plugin-colorschemes&amp;quot;;

export default {
  ...略
  methods: {
    drawLineChart() {
      const ctx = document.getElementById(&amp;quot;myChart&amp;quot;);

      // グラフの作成及び設定を指定する
      window.populationChart = new Chart(ctx, {
	    ...略
	  });
    },
  },
  mounted() {
    // グラフの作成
    this.drawLineChart();
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/br&gt;
&lt;pre&gt;&lt;code class=&quot;language-js:tests/unit/Chart.spec.js&quot;&gt;import { shallowMount } from &amp;quot;@vue/test-utils&amp;quot;;
import Chart from &amp;quot;@/components/Chart.vue&amp;quot;;


test(&amp;quot;Chart&amp;quot;, () =&amp;gt; {
  const state = {
	...略
  }

  const $store = {
	...略
  }

  const wrapper = shallowMount(Chart, {
    global: {
      mocks: {
        $store
      }
    }
  })
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;何が起きたのか・エラー内容&lt;/h2&gt;
&lt;p&gt;なんと！こんな素敵なエラーが出てきました✨✨&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;FAIL  tests/unit/PopulationChart.spec.js
 ● Console

console.warn node_modules/@vue/runtime-core/dist/runtime-core.cjs.js:6465
  [Vue warn]: Unhandled error during execution of mounted hook 
	at &amp;lt;PopulationChart ref=&amp;quot;VTU_COMPONENT&amp;quot; &amp;gt; 
	at &amp;lt;VTUROOT&amp;gt;

 ● 

  TypeError: Cannot read property &apos;length&apos; of null
  
  ...略
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;な...何を言っているのかわからねーと思うが、おれも何をされたのかわからなかった...&lt;/p&gt;
&lt;p&gt;どこのことを言っているの分からなかったし、時間をかけて調べても何にも出てこない、マジで&lt;/p&gt;
&lt;p&gt;はじめはVuexのストアが問題で発生していると思い込んで、ひたすらモック作成に取り組んでいたけど一向にエラー文が変わらない絶望...&lt;/p&gt;
&lt;p&gt;そんなこんなで、色々いじくりまわしてるとあることに気づいた&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;TypeError: Cannot read property &apos;length&apos; of null

  at Object.acquireContext (node_modules/chart.js/dist/Chart.js:7756:19)
  at Chart.construct (node_modules/chart.js/dist/Chart.js:9324:26)
  at new Chart (node_modules/chart.js/dist/Chart.js:9311:7)
  at Proxy.drawLineChart (src/components/PopulationChart.vue:760:32)
  at Proxy.mounted (src/components/PopulationChart.vue:816:10)
  ...略
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さっきは略していましたが、よく見ると&lt;code&gt;Chart&lt;/code&gt;やら&lt;code&gt;Context&lt;/code&gt;やら書いてある...&lt;/p&gt;
&lt;p&gt;もしかしてもしかするとこの&lt;code&gt;Chart.js&lt;/code&gt;が問題のパターン？と思い、たくさん調べてみましたよ。&lt;/p&gt;
&lt;p&gt;ライブラリの問題部分を読んでみると、どうやらコンストラクタの引数のcanvasエレメントが問題だった。さらに調べた結果、canvasが表示されきってないとかどうとかで読み込めなかったらしい。／(^o^)＼ﾅﾝﾃｺｯﾀｲ&lt;/p&gt;
&lt;h2&gt;問題の解決方法&lt;/h2&gt;
&lt;p&gt;ということで、数時間かけて問題に対処した結果、コードの修正部分は以下の通りです‼‼‼‼&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/components/Chart.vue&lt;/code&gt;の&lt;code&gt;mounted&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js:src/components/Chart.vue&quot;&gt;  mounted() {
    // this.$nextTickで囲むだけ‼‼‼‼‼‼ 簡単だね‼
    this.$nextTick(function () {
      // グラフの作成
      this.drawLineChart();
    });
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そう、ここだけ‼&lt;/p&gt;
&lt;p&gt;&lt;code&gt;canvas&lt;/code&gt;がマウントされきっていないため、&lt;code&gt;$nextTick&lt;/code&gt;を使ってすべてのコンポーネントがマウントされるのを待ったらいけました。&lt;/p&gt;
&lt;p&gt;というのも、&lt;code&gt;mounted&lt;/code&gt;では子コンポーネント全てをマウントしたことは保証しないらしく、すべてのコンポーネントがマウントされているとは限らないそうです。公式ドキュメントにも普通に書いてあったので参考に載っけときます。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;数時間悩んだ結果2行追加で解決でつらいよ、俺の努力はいったい...&lt;/p&gt;
&lt;p&gt;／(^o^)＼ﾅﾝﾃｺｯﾀｲ&lt;/p&gt;
&lt;p&gt;深夜テンションで書きましたのでもう寝ます( ˘ω˘)ｽﾔｧ&lt;/p&gt;
&lt;p&gt;誤字脱字はゆるしてください&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/chan_kaku/items/7f3233053b0e209ef355#mounted&quot;&gt;Vueのライフサイクルを完全に理解した - Qiita&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://jp.vuejs.org/v2/api/index.html#mounted&quot;&gt;API — Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>CloudRun上での.NET Identityセッション切れ問題の解決方法</title><link>https://masa-dev.net/note/6777b64ea98a21b9fbbc527c/</link><guid isPermaLink="true">https://masa-dev.net/note/6777b64ea98a21b9fbbc527c/</guid><description>.NETをCloudRun上にデプロイした環境で、頻繁にIdentityのセッションが切れてしまう現象が発生します。  この問題の解決方法について、多少の需要があると思いましたので、記事にしました。</description><pubDate>Fri, 03 Jan 2025 13:56:13 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;.NETをCloudRun上にデプロイした環境で、頻繁にIdentityのセッションが切れてしまう現象が発生します。&lt;/p&gt;
&lt;p&gt;この問題の解決方法について、多少の需要があると思いましたので、記事にしました。&lt;/p&gt;
&lt;h2&gt;セッションが切断される理由&lt;/h2&gt;
&lt;p&gt;.NET Identityではトークン認証を使用しており、サーバー側で暗号化したトークンをCookieでやりとりすることでセッションの状態を管理しています。&lt;/p&gt;
&lt;p&gt;この認証に使用される暗号化キーの保存先は、.NETのデータ保護システムに設定された場所に保存されます。デフォルトで暗号化キーは&lt;strong&gt;メモリ&lt;/strong&gt;に保存されます。&lt;/p&gt;
&lt;p&gt;一般的な単一のオンプレサーバーやVMなどでは、再起動などをしない限りメモリがリセットされないため、問題は発生しません。&lt;/p&gt;
&lt;p&gt;ただし、CloudRunのようなアクセス数によってコンテナが増減する場合は問題が発生します。 &lt;br&gt;
コンテナごとにメモリが別れているため、スケールインしてコンテナ数が0になった際にメモリがリセットされ、暗号化キーが失われてしまいます。 &lt;br&gt;
また、スケールアウトしてコンテナ数が増えた場合でも、新規作成されたコンテナのメモリに暗号化キーは保存されていないため、セッションが切れてしまいます。&lt;/p&gt;
&lt;p&gt;つまり、セッションが切断される理由は、コンテナ型Webサーバーでコンテナの増減によって、メモリ内に保存されている暗号化キーが失われてしまうからです。&lt;/p&gt;
&lt;h2&gt;暗号化キーを別ストレージ（DBなど）に保存する&lt;/h2&gt;
&lt;p&gt;上記の問題は、暗号化キーの保存先であるデータ保護システムのデフォルト保存先をメモリから別ストレージに変更することで解決できます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/aspnet/core/security/data-protection/implementation/key-storage-providers?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&quot;&gt;https://learn.microsoft.com/ja-jp/aspnet/core/security/data-protection/implementation/key-storage-providers?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は例として、暗号化キーの保存先をDB（Postgresql）に変更します。MySQLでも同じ方法で保存先を変更できます。&lt;/p&gt;
&lt;h3&gt;依存パッケージのインストール&lt;/h3&gt;
&lt;p&gt;まず、対象のプロジェクトに移動し、以下のパッケージをNugetからインストールします。バージョンは各プロジェクトに合わせます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Microsoft.AspNetCore.DataProtection.EntityFrameworkCore --version 9.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.EntityFrameworkCore/&quot;&gt;https://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.EntityFrameworkCore/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;コードの変更&lt;/h3&gt;
&lt;p&gt;次に、&lt;code&gt;Program.cs&lt;/code&gt;に以下の内容を追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs:Program.cs&quot;&gt;using Microsoft.AspNetCore.DataProtection;

// 略

builder.Services.AddDataProtection()
    .PersistKeysToDbContext&amp;lt;ApplicationDbContext&amp;gt;();

var app = builder.Build();
// 略
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;code&gt;ApplicationDbContext&lt;/code&gt;に&lt;code&gt;IDataProtectionKeyContext&lt;/code&gt;を継承し、&lt;code&gt;DataProtectionKeys&lt;/code&gt;プロパティを追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs:Data/ApplicationDbContext.cs&quot;&gt;using Microsoft.AspNetCore.DataProtection.EntityFrameworkCore;

public class ApplicationDbContext : IdentityDbContext, IDataProtectionKeyContext
{
    // 略

    public DbSet&amp;lt;DataProtectionKey&amp;gt; DataProtectionKeys { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;マイグレーション反映&lt;/h3&gt;
&lt;p&gt;上記の追加が完了したら、マイグレーションの作成、DB反映をします。&lt;br&gt;
下記コードはサンプルになります。マイグレーションコードは既存コードに合わせて実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# マイグレーションの発行
dotnet ef migrations add AddDataProtectionKeysTable --context ApplicationDbContext --output-dir Data/Migrations

# マイグレーションをデータベースに反映
dotnet ef database update --context ApplicationDbContext
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;確認&lt;/h3&gt;
&lt;p&gt;これでDBに &lt;code&gt;DataProtectionKeys&lt;/code&gt; というテーブルが作成されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/d408e1d2-2147-4985-95fe-edcc1a53147a/dataprotectonkeytable1.png&quot; alt=&quot;dataprotectonkeytable1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;ログイン時に作成された暗号化キーが保存されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/de1eae86-6ef9-423a-ade2-7165ec6bb4f1/dataprotectonkeytable.png&quot; alt=&quot;dataprotectonkeytable.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;終わりに&lt;/h2&gt;
&lt;p&gt;結構前からこの問題について調査していましたが、検索の仕方が悪かったのか、解決まで実は1年くらいかかっています。&lt;/p&gt;
&lt;p&gt;それまでは、外部の認証プロバイダを使用するなりして誤魔化していましたが、記事の解決策のおかげで外部認証に依存せずに済みそうでハッピーです。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/aspnet/core/security/data-protection/implementation/key-storage-providers?view=aspnetcore-9.0&amp;amp;tabs=visual-studio&quot;&gt;ASP.NET Core でのキー ストレージ プロバイダー | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>NeoVim kickstartの設定説明メモ（KeyMap編）</title><link>https://masa-dev.net/note/670280a2e016366845bc387a/</link><guid isPermaLink="true">https://masa-dev.net/note/670280a2e016366845bc387a/</guid><description>設定内容（KeyMap） 検索結果のハイライト削除  検索結果のハイライトを`ESC`キーで解除する。 デフォルトでは`/`で検索を確定した後、別の検索をしないとそのハイライトが残り続ける。結構邪魔。</description><pubDate>Sun, 06 Oct 2024 15:40:44 GMT</pubDate><content:encoded>&lt;p&gt;前回の続き&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://masa-dev.net/post/66e23631e6213d85f24fb260&quot;&gt;NeoVim kickstartの設定説明メモ（オプション編）&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;設定内容（KeyMap）&lt;/h2&gt;
&lt;h3&gt;検索結果のハイライト削除&lt;/h3&gt;
&lt;p&gt;検索結果のハイライトを&lt;code&gt;ESC&lt;/code&gt;キーで解除する。&lt;br&gt;
デフォルトでは&lt;code&gt;/&lt;/code&gt;で検索を確定した後、別の検索をしないとそのハイライトが残り続ける。結構邪魔。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Clear highlights on search when pressing &amp;lt;Esc&amp;gt; in normal mode
--  See `:help hlsearch`
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;Esc&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;nohlsearch&amp;lt;CR&amp;gt;&apos;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;診断ツールを表示する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; + &lt;code&gt;q&lt;/code&gt; で診断ツールを分割ウインドウとして表示する。&lt;br&gt;
診断ツールはLSPのアラートなどの表示のこと。VSCodeでいう「問題」タブ。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Diagnostic keymaps
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;leader&amp;gt;q&apos;, vim.diagnostic.setloclist, { desc = &apos;Open diagnostic [Q]uickfix list&apos; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;ターミナルモードからノーマルモードに戻る&lt;/h3&gt;
&lt;p&gt;ターミナルモードからノーマルモードに戻るためのショートカット。&lt;br&gt;
通常のノーマルモードに戻るコマンドは&lt;code&gt;Ctrl \&lt;/code&gt; &lt;code&gt;Ctrl n&lt;/code&gt; になっている。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Exit terminal mode in the builtin terminal with a shortcut that is a bit easier
-- for people to discover. Otherwise, you normally need to press &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;, which
-- is not what someone will guess without a bit more experience.
--
-- NOTE: This won&apos;t work in all terminal emulators/tmux/etc. Try your own mapping
-- or just use &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt; to exit terminal mode
vim.keymap.set(&apos;t&apos;, &apos;&amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt;&apos;, &apos;&amp;lt;C-\\&amp;gt;&amp;lt;C-n&amp;gt;&apos;, { desc = &apos;Exit terminal mode&apos; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;矢印キーの無効化&lt;/h3&gt;
&lt;p&gt;ノーマルモードでの矢印キーを無効化する。矢印キーを無効化したい場合はコメントアウトを外す。&lt;br&gt;
矢印キーでの移動を絶対に許さないマン向け設定。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- TIP: Disable arrow keys in normal mode
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;left&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use h to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;right&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use l to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;up&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use k to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;down&amp;gt;&apos;, &apos;&amp;lt;cmd&amp;gt;echo &amp;quot;Use j to move!!&amp;quot;&amp;lt;CR&amp;gt;&apos;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;分割ウインドウ移動&lt;/h3&gt;
&lt;p&gt;分割ウインドウを&lt;code&gt;Ctrl h&lt;/code&gt;, &lt;code&gt;Ctrl l&lt;/code&gt;, &lt;code&gt;Ctrl j&lt;/code&gt;, &lt;code&gt;Ctrl k&lt;/code&gt; で移動できるようにする。&lt;br&gt;
ちなみにウインドウ分割は以下の方法でできる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl w&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; 垂直分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl w&lt;/code&gt; + &lt;code&gt;s&lt;/code&gt; 水平分割&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Keybinds to make split navigation easier.
--  Use CTRL+&amp;lt;hjkl&amp;gt; to switch between windows
--
--  See `:help wincmd` for a list of all window commands
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-h&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-h&amp;gt;&apos;, { desc = &apos;Move focus to the left window&apos; })
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-l&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-l&amp;gt;&apos;, { desc = &apos;Move focus to the right window&apos; })
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-j&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-j&amp;gt;&apos;, { desc = &apos;Move focus to the lower window&apos; })
vim.keymap.set(&apos;n&apos;, &apos;&amp;lt;C-k&amp;gt;&apos;, &apos;&amp;lt;C-w&amp;gt;&amp;lt;C-k&amp;gt;&apos;, { desc = &apos;Move focus to the upper window&apos; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;設定内容（Basic Autocommands）&lt;/h2&gt;
&lt;h3&gt;ヤンク部分のハイライト&lt;/h3&gt;
&lt;p&gt;NeovimのAutocommandは、特定のイベントが発生したときに自動的にコマンドを実行する機能のこと。&lt;/p&gt;
&lt;p&gt;以下の設定では&lt;code&gt;TextYankPost&lt;/code&gt;というイベントで発火し、ヤンク時にヤンクした文字範囲をハイライトする。&lt;br&gt;
&lt;code&gt;TextYankPost&lt;/code&gt;はテキストをヤンクした後に実行されるイベントのこと。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Highlight when yanking (copying) text
--  Try it with `yap` in normal mode
--  See `:help vim.highlight.on_yank()`
vim.api.nvim_create_autocmd(&apos;TextYankPost&apos;, {
  desc = &apos;Highlight when yanking (copying) text&apos;,
  group = vim.api.nvim_create_augroup(&apos;kickstart-highlight-yank&apos;, { clear = true }),
  callback = function()
    vim.highlight.on_yank()
  end,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/8783fb06-b261-4f4f-b3a3-0f4bf91abab4/basic-autocmd-yank-highlight.gif&quot; alt=&quot;basic-autocmd-yank-highlight.gif&quot;&gt;&lt;/p&gt;
&lt;h2&gt;終わりに&lt;/h2&gt;
&lt;p&gt;次回は長大なpluginなので投稿できるかな…?&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://neovim.io/doc/user/autocmd.html&quot;&gt;https://neovim.io/doc/user/autocmd.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>NeoVim kickstartの設定説明メモ（オプション編）</title><link>https://masa-dev.net/note/66e23631e6213d85f24fb260/</link><guid isPermaLink="true">https://masa-dev.net/note/66e23631e6213d85f24fb260/</guid><description>最近NeoVimのキックスタートを使ってみたところ、意外と使いやすかったので、そのキックスタートの設定の内容のまとめ</description><pubDate>Thu, 12 Sep 2024 00:41:01 GMT</pubDate><content:encoded>&lt;p&gt;最近NeoVimのキックスタートを使ってみたところ、意外と使いやすかったので、そのキックスタートの設定の内容のまとめ&lt;/p&gt;
&lt;p&gt;↓nvim kickstart&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim&quot;&gt;https://github.com/nvim-lua/kickstart.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;続くかわからないけど、今回はオプション周りをまとめる&lt;/p&gt;
&lt;h2&gt;設定内容&lt;/h2&gt;
&lt;h3&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;キーの設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;キーの設定を半角スペースにする&lt;br&gt;
デフォルトはバックスラッシュ（&lt;code&gt;\&lt;/code&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Set &amp;lt;space&amp;gt; as the leader key
-- See `:help mapleader`
--  NOTE: Must happen before plugins are loaded (otherwise wrong leader will be used)
vim.g.mapleader = &apos; &apos;
vim.g.maplocalleader = &apos; &apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Nerd Fontに対応しているか&lt;/h3&gt;
&lt;p&gt;Nerd Font対応していれば &lt;code&gt;true&lt;/code&gt; にする&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Set to true if you have a Nerd Font installed and selected in the terminal
vim.g.have_nerd_font = false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;行番号の有効化&lt;/h3&gt;
&lt;p&gt;相対的な行番号も設定できるとのこと&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Make line numbers default
vim.opt.number = true
-- You can also add relative line numbers, to help with jumping.
--  Experiment for yourself to see if you like it!
-- vim.opt.relativenumber = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;マウスモードを有効化&lt;/h3&gt;
&lt;p&gt;有効化するとマウスでのカーソル位置の移動ができる様になる&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Enable mouse mode, can be useful for resizing splits for example!
vim.opt.mouse = &apos;a&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;モードを表示するかの設定&lt;/h3&gt;
&lt;p&gt;すでにステータスラインに表示しているため表示しないとのこと&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Don&apos;t show the mode, since it&apos;s already in the status line
vim.opt.showmode = false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;クリックボードの同期&lt;/h3&gt;
&lt;p&gt;OSとのクリップボード同期を有効化するが、起動時間が長くなるため&lt;code&gt;UiEnter&lt;/code&gt;の後に設定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Sync clipboard between OS and Neovim.
--  Schedule the setting after `UiEnter` because it can increase startup-time.
--  Remove this option if you want your OS clipboard to remain independent.
--  See `:help &apos;clipboard&apos;`
vim.schedule(function()
  vim.opt.clipboard = &apos;unnamedplus&apos;
end)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;ブレークインデントの有効化&lt;/h3&gt;
&lt;p&gt;有効にすると改行時にインデントされた状態になる&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Enable break indent
vim.opt.breakindent = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Undoファイルの有効化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt;コマンドのでのundoを記録する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Save undo history
vim.opt.undofile = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;検索時の大文字・小文字の無視設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;\C&lt;/code&gt;か大文字が含まれていない限りは区別せずに検索する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Case-insensitive searching UNLESS \C or one or more capital letters in the search term
vim.opt.ignorecase = true
vim.opt.smartcase = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;サインカラムの有効化&lt;/h3&gt;
&lt;p&gt;サインカラムをデフォルトに設定する&lt;br&gt;
サインカラムは、行番号の左に表示される記号の行のこと&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Keep signcolumn on by default
vim.opt.signcolumn = &apos;yes&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;スワップファイルの更新時間&lt;/h3&gt;
&lt;p&gt;この時間の間 (ミリ秒単位) 入力がなければ、スワップファイルがディスクに書き込まれる（参照：&lt;a href=&quot;https://vim-jp.org/vimdoc-ja/options.html&quot;&gt;https://vim-jp.org/vimdoc-ja/options.html&lt;/a&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Decrease update time
vim.opt.updatetime = 250
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;キーマッピングシーケンスの待ち時間&lt;/h3&gt;
&lt;p&gt;キーマッピングシーケンスの待ち時間を減らす&lt;br&gt;
例）&lt;code&gt;&amp;lt;Leader&amp;gt;w&lt;/code&gt;のマッピングの場合、&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;入力後の待ち時間を設定する&lt;br&gt;
which-keyのポップアップ表示を早めるために0.3秒に設定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Decrease mapped sequence wait time
-- Displays which-key popup sooner
vim.opt.timeoutlen = 300
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;分割画面の方向設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;横に分割する場合は、右に新しいウインドウを作成&lt;/li&gt;
&lt;li&gt;縦に分割する場合は、下に新しいウインドウを作成&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Configure how new splits should be opened
vim.opt.splitright = true
vim.opt.splitbelow = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;リストモードの有効化&lt;/h3&gt;
&lt;p&gt;有効化した場合、&lt;code&gt;listchars&lt;/code&gt;にある文字が反映される&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Sets how neovim will display certain whitespace characters in the editor.
--  See `:help &apos;list&apos;`
--  and `:help &apos;listchars&apos;`
vim.opt.list = true
vim.opt.listchars = { tab = &apos;» &apos;, trail = &apos;·&apos;, nbsp = &apos;␣&apos; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;コマンド結果のプレビュー&lt;/h3&gt;
&lt;p&gt;コマンドの結果を分割画面でプレビューできる&lt;br&gt;
置換（&lt;code&gt;:%s/&lt;/code&gt;）がわかりやすい&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Preview substitutions live, as you type!
vim.opt.inccommand = &apos;split&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;カーソル行の強調表示&lt;/h3&gt;
&lt;p&gt;カーソルの行がどこにあるかわかる様にする&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Show which line your cursor is on
vim.opt.cursorline = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;カーソルの上下に表示する行数の設定&lt;/h3&gt;
&lt;p&gt;カーソルの上下に表示する画面行数の最小値を設定する&lt;/p&gt;
&lt;p&gt;開始・終了行以外では、設定された行数より下にカーソルを移動するとスクロールする&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Minimal number of screen lines to keep above and below the cursor.
vim.opt.scrolloff = 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://vim-jp.org/vimdoc-ja/map.html&quot;&gt;https://vim-jp.org/vimdoc-ja/map.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://vim-jp.org/vimdoc-ja/options.html&quot;&gt;https://vim-jp.org/vimdoc-ja/options.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>.NET MVCをSupabase + Cloud Runで動かしてみる</title><link>https://masa-dev.net/note/6425b90086e7de37b82ff1a6/</link><guid isPermaLink="true">https://masa-dev.net/note/6425b90086e7de37b82ff1a6/</guid><description>少し前に話題になっていた Supabase を最近になって知りました。 SupabaseはFirebaseの代替手段と謳っており、Postgresのデータベースや認証、ストレージなどの機能を提供</description><pubDate>Fri, 31 Mar 2023 18:25:05 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;少し前に話題になっていた Supabase を最近になって知りました。&lt;br&gt;
SupabaseはFirebaseの代替手段と謳っており、Postgresのデータベースや認証、ストレージなどの機能を提供するプラットフォームのことです。&lt;/p&gt;
&lt;p&gt;個人的にPosrgresデータベースを無料枠で使用することができる点が素晴らしいと思っています。&lt;br&gt;
FirebaseのNoSQLもいいですが、EntityFrameworkとの相性は悪くて開発体験がよくないですから、あまり使いたくはありません。また、Cloud SQLや RDSのようなフルマネージドデータベースを使用するという選択肢もありますが、いかんせんコストが高いので、個人開発には向きません。&lt;/p&gt;
&lt;p&gt;そんなこんなでCloudRun + Supabaseを使用すれば、実質無料で.NETの環境を作ることができるのではないかと思って、試してみました。&lt;/p&gt;
&lt;h2&gt;インフラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Run&lt;/li&gt;
&lt;li&gt;Supabase (Postgres)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;.NET MVC Identity&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Supabaseでプロジェクト作成&lt;/h2&gt;
&lt;p&gt;ログインは割愛します。&lt;/p&gt;
&lt;p&gt;まず、プロジェクトを作成します。（データベースパスワードは控えておく）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/e842523a-063b-4fb9-abaa-7e9940b1b4a8/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-03-31002638.png&quot; alt=&quot;スクリーンショット2023-03-31002638.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;プロジェクトを作成してプロジェクト詳細に入ったら、左メニューの設定（Project Settings）&amp;gt;Databaseに移動します。&lt;/p&gt;
&lt;p&gt;Connection stringの.NETタブを選択すると.NETアプリ用の接続設定を取得できます。&lt;br&gt;
この時点でSQLクライアントソフトから接続確認ができました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/cdd387f3-fc4d-4580-9067-56e57c16fb6a/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-03-31010948.png&quot; alt=&quot;スクリーンショット2023-03-31010948.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;.NET Core Identity環境の作成&lt;/h2&gt;
&lt;p&gt;.NETの環境を作成します。&lt;br&gt;
開発環境はVSCodeでDev Container拡張機能を使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dockerfile:Dockerfile&quot;&gt;FROM mcr.microsoft.com/dotnet/sdk:7.0 AS runtime

WORKDIR /app

COPY ./src .

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    git \
    vim

RUN dotnet tool install --global dotnet-ef --version 7.0
RUN dotnet tool install --global dotnet-aspnet-codegenerator --version 7.0

ENV PATH $PATH:/root/.dotnet/tools
ENV TZ Asia/Tokyo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-yml:docker-compose.yml&quot;&gt;version: &apos;3.7&apos;

services:
  supabase_web:
    container_name: &amp;quot;supabase_web&amp;quot;
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - &amp;quot;50001:8080&amp;quot;
    working_dir: /app/
    tty: true
    volumes:
      - ./src/:/app/

  supabase_db:
    container_name: &amp;quot;supabase_db&amp;quot;
    image: postgres:13-bullseye
    ports:
      - &amp;quot;55432:5432&amp;quot;
    volumes:
      - .dbstore:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=A9AbbsJiNXUA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mkdir src&lt;/code&gt;でsrcフォルダを作成したあとに、コマンドパレットを開き、&lt;code&gt;&amp;gt;Dev Containers: Open Folder in Container...&lt;/code&gt;を実行してコンテナを起動します。&lt;/p&gt;
&lt;p&gt;次に、下記コマンドで.NET MVCテンプレートを作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /
dotnet new mvc --auth Individual -uld -o app -n SupabaseTest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;併せて、gitignoreファイルも作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /app &amp;amp;&amp;amp; dotnet new gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成したら、下記コマンドでPostgresのNugetパッケージをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PostgreSQLに接続できるように&lt;code&gt;Program.cs&lt;/code&gt;ファイルを編集します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs:Program.cs&quot;&gt;using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using SupabaseTest.Data;

var builder = WebApplication.CreateBuilder(args);

builder.WebHost.UseUrls(&amp;quot;http://0.0.0.0:8080&amp;quot;);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;) ?? throw new InvalidOperationException(&amp;quot;Connection string &apos;DefaultConnection&apos; not found.&amp;quot;);
builder.Services.AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
    options.UseNpgsql(connectionString));

// 略 //
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;appSettings.Develop.json&lt;/code&gt;を以下のように変更します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json:appSettings.Develop.json&quot;&gt;{
  &amp;quot;DetailedErrors&amp;quot;: true,
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;Host= supabase_db;Port=5432;Database=postgres;Username=postgres;Password=A9AbbsJiNXUA&amp;quot;
  },
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にマイグレーション関連を整理します。&lt;/p&gt;
&lt;p&gt;今のままではマイグレーションがSQL Server用のものとなっており、updateを行ってもエラーが発生します。そのため、下記コマンドで初期マイグレーションを再発行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /app
rm Data/Migrations/*.cs
# マイグレーションの発行
dotnet ef migrations add InitialCreate --context ApplicationDbContext --output-dir Data/Migrations

# マイグレーションをデータベースに反映
dotnet ef database update --context ApplicationDbContext
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にデバッグできるようにVSCodeの左メニューから、「実行とデバッグ」を開き、「launch.jsonファイルを作成」し、.NET 5+ .NET MVCを選択して&lt;code&gt;launch.json&lt;/code&gt;を自動生成します。&lt;br&gt;
また、VSCodeの拡張機能で「C# &lt;code&gt;ms-dotnettools.csharp&lt;/code&gt;」をインストールしておきます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;launch.json&lt;/code&gt;ファイルが自動生成できたら、&lt;code&gt;F5&lt;/code&gt;キーを押してデバッグを開始します。&lt;/p&gt;
&lt;p&gt;デバッグが実行出来たら、&lt;a href=&quot;http://localhost:50001/&quot;&gt;http://localhost:50001/&lt;/a&gt; でアクセスできます。&lt;/p&gt;
&lt;p&gt;データベースに接続できているか確認するために適当にユーザーを登録して、「Click here to confirm your account」をクリックします。その後、ログインができていたらDBは接続できています。&lt;/p&gt;
&lt;p&gt;これでローカルで開発できる環境ができました。&lt;/p&gt;
&lt;h2&gt;本番環境にマイグレーション&lt;/h2&gt;
&lt;p&gt;CloudRunにデプロイした際にSupabaseのPostgreに接続できるようにする必要があります。&lt;/p&gt;
&lt;p&gt;まず、Postgresの接続情報を記載した&lt;code&gt;appsettings.Production.json&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json:appsettings.Production.json&quot;&gt;{
  &amp;quot;DetailedErrors&amp;quot;: false,
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;User Id=postgres;Password=XXXXXXXX;Server=db.xxxxxxxxxxxxxxxxxx.supabase.co;Port=5432;Database=postgre&amp;quot;
  },
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に下記のコマンドでsupabaseのデータベースを更新します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /app
export ASPNETCORE_ENVIRONMENT=&amp;quot;Production&amp;quot;
dotnet ef database update
export ASPNETCORE_ENVIRONMENT=&amp;quot;Development&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Cloud Runにデプロイ&lt;/h2&gt;
&lt;p&gt;まず、Cloud Runとは、サーバーレスのプラットフォームで、コンテナベースのWebアプリケーションを実行させることができます。&lt;/p&gt;
&lt;p&gt;要はDockerなどのコンテナからアプリケーションを実行するため、任意の言語の環境を使用することができます。また、Dockerベースの開発をする場合、ローカルの環境とCloud Runの環境を同じ環境にすることができるメリットがあります。&lt;/p&gt;
&lt;p&gt;先ほど作成した.NETアプリケーションをCloud Runにデプロイします。&lt;/p&gt;
&lt;h3&gt;GCPのロール変更&lt;/h3&gt;
&lt;p&gt;GCPのサービスアカウントからCloudRunにデプロイするため、権限を付与する必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cloud Buildに移動して、左メニューの「設定」に移動&lt;/li&gt;
&lt;li&gt;「Cloud Run」のステータスを有効に変更&lt;/li&gt;
&lt;li&gt;モーダルの「すべてのサービス アカウントにアクセス権を付与」&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Cloud buildでイメージをビルドする&lt;/h3&gt;
&lt;p&gt;gcloud sdkがローカルにインストールされている前提で話します。&lt;/p&gt;
&lt;p&gt;Cloud Runでデプロイするためにはデプロイするコンテナのイメージが必要なので、Cloud Buildを使用してCloud Registryにイメージを保存します。&lt;/p&gt;
&lt;p&gt;まず、デプロイ用のDocker設定ファイルである&lt;code&gt;CloudRun.Dockerfile&lt;/code&gt;を作成します。&lt;br&gt;&lt;br&gt;
注意点としては、CloudRunにデプロイする場合は &lt;strong&gt;必ず8080ポートを公開する&lt;/strong&gt;ことです。そうしないとデプロイ時にエラーが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dockerfile:CloudRun.Dockerfile&quot;&gt;FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build

WORKDIR /app
COPY ./src .

RUN dotnet publish -c Release -o dist

FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS runtime

WORKDIR /app
COPY --from=build /app/dist .

ENV TZ Asia/Tokyo
ENV ASPNETCORE_ENVIRONMENT Production

ENV PORT=8080
EXPOSE 8080

ENTRYPOINT [&amp;quot;dotnet&amp;quot;, &amp;quot;SupabaseTest.dll&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にビルド設定の&lt;code&gt;cloudbuild.yml&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yml:cloudbuild.yml&quot;&gt;steps:
# Build the container image
- name: &apos;gcr.io/cloud-builders/docker&apos;
  args: [&apos;build&apos;, &apos;-t&apos;, &apos;gcr.io/PROJECT_ID/IMAGE&apos;, &apos;-f&apos;, &apos;CloudRun.Dockerfile&apos;, &apos;.&apos;]
# Push the container image to Container Registry
- name: &apos;gcr.io/cloud-builders/docker&apos;
  args: [&apos;push&apos;, &apos;gcr.io/PROJECT_ID/IMAGE&apos;]
# Deploy container image to Cloud Run
- name: &apos;gcr.io/google.com/cloudsdktool/cloud-sdk&apos;
  entrypoint: gcloud
  args: [&apos;run&apos;, &apos;deploy&apos;, &apos;SERVICE_NAME&apos;, &apos;--image&apos;, &apos;gcr.io/PROJECT_ID/IMAGE&apos;, &apos;--region&apos;, &apos;REGION&apos;, &apos;--allow-unauthenticated&apos;]
images:
- gcr.io/PROJECT_ID/IMAGE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cloudbuild.yml&lt;/code&gt;の各項目を変換しておいてください。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変換前&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PROJECT_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロジェクトのID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IMAGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Contaier Registoryに保存する名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SERVICE_NAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デプロイサービスの名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;REGION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デプロイ先のリージョン&lt;br&gt;東京なら&lt;code&gt;asia-northeast1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;デプロイする&lt;/h3&gt;
&lt;p&gt;ローカル環境で&lt;code&gt;CloudRun.Dockerfile&lt;/code&gt;のあるフォルダで以下のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gcloud builds submit ./ --config cloudbuild.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特にエラーがなければデプロイの成功です。&lt;/p&gt;
&lt;p&gt;認証の機能が使用できていたので、データベースにも接続できていますね！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/8e50b2a3-edd8-4f72-9ae7-781009eaaa31/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-04-01001455.png&quot; alt=&quot;スクリーンショット2023-04-01001455.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;実際にCloud RunとSupabaseを使用することで.NETの環境を限りなく安くなるように作成できました。ただ、今回作成した.NETアプリは、Cloud Runの特性上、十数分程度でログインセッションが切れてしまうため、セッションをインメモリからデータベースに保存するなどの対応が必要になりそうです。&lt;br&gt;&lt;br&gt;
Supabaseのプロジェクトは無料枠で2つのみなので、数を作成できませんが、個人開発にはもっていこいのサービスだと思います。&lt;/p&gt;
&lt;p&gt;Cloud Runなので.NET Coreの環境にとどまらず、頑張ればWordpressの環境も作成できるんじゃないかと思います。ほぼ無料でWordpress環境は夢があっていいですね。&lt;/p&gt;
&lt;p&gt;さいごに、サクッと記事が書けるだろうと思って書き始めましたが、思ったより基本的な説明に時間をとってしまう形になってしまいました。記事を作成するのは難しいですね...&lt;/p&gt;
</content:encoded></item><item><title>Windowsのbash環境を整備していく</title><link>https://masa-dev.net/note/63d6a6932772b5781daab492/</link><guid isPermaLink="true">https://masa-dev.net/note/63d6a6932772b5781daab492/</guid><description>Windowsのbash環境を整備していく</description><pubDate>Sun, 29 Jan 2023 17:50:08 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近（一年前）に引っ越してから Windows 環境を一新したので、 シェル関連で今までやってきたことをまとめようとおもいます。&lt;/p&gt;
&lt;h2&gt;実行ターミナル&lt;/h2&gt;
&lt;p&gt;まず、シェルの実行環境は、Windows Terminal と &lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt; を使用しています。&lt;br&gt;&lt;br&gt;
気分でどちらを使うか決めているのですが、使いやすさでいうなら Windows Terminal の方がいいです。Windows の Hyper は画面分割ができますが、コピーとペーストのショートカットが通常と違って使いにくいです。&lt;/p&gt;
&lt;p&gt;Hyperにはポケモンのテーマなどもあるので、（見にくくなりますが）気になる人は使ってみてもいいかもしれないですね。&lt;/p&gt;
&lt;h2&gt;シェル&lt;/h2&gt;
&lt;p&gt;基本的に Git Bash を使用しています。&lt;br&gt;&lt;br&gt;
Git Bash はGitをインストールする勝手にインストールされているので、使用している人も多いんじゃないでしょうか。&lt;/p&gt;
&lt;p&gt;bash でできることが大体できますし、デフォルトでgitのブランチが表示されている点が優秀です。&lt;/p&gt;
&lt;p&gt;最初はPowerShellを使用していましたが、&lt;code&gt;ls&lt;/code&gt;コマンドが使用できなかったり、専用のコマンドがよくわからなかったりと、不満があったので結果として Git Bash を使う形に落ち着いています。&lt;/p&gt;
&lt;h2&gt;コマンド&lt;/h2&gt;
&lt;p&gt;Git Bashを使いやすくするため、いくつかのコマンドを使えるようにしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;li&gt;peco&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれ説明していきます。&lt;/p&gt;
&lt;h3&gt;Vim&lt;/h3&gt;
&lt;p&gt;名前だけは聞いたことがある人も多いんじゃないでしょうか。Vim はコマンドラインエディタの一種であり、アプリの切り替えを行わずにコマンドラインから直接ファイルの編集を行うことができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.bashrc&lt;/code&gt;などのちょっとした設定ファイルなどの編集を行う際などによく使っています。&lt;br&gt;&lt;br&gt;
かなり癖のある UI をしていますが、住めば都というように、慣れれば VS Code で Vim の拡張機能を入れたくなるほどになります。&lt;/p&gt;
&lt;p&gt;また、プラグインをインストールすることで、デフォルトのカラースキームを変更できたり、エクスプローラーのような機能を追加することもできます。その設定などは機会があれば別の記事にしようと思います。&lt;/p&gt;
&lt;h3&gt;Peco&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/peco/peco&quot;&gt;peco&lt;/a&gt; は与えられた入力を視覚的に選択できるコマンドです。&lt;/p&gt;
&lt;p&gt;基本的なコマンドの使用方法は、与えられた入力リストをselectのように選択させて、選択させたものを文字列として出力します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# ls の出力リストから選択させる
ls | peco
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述のような使い方は基本的にはせずに、&lt;code&gt;.bash_history&lt;/code&gt;の内容を読むようにして、&lt;code&gt;Ctrl + r&lt;/code&gt;などのバインディングでコマンドの履歴検索をできるようにしています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ik.imagekit.io/masahikoproject/1b9d5393-50b4-46d6-9ce5-0ecd5eb384e3/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882023-01-30020344.png&quot; alt=&quot;スクリーンショット2023-01-30020344.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;さいごに&lt;/h2&gt;
&lt;p&gt;vim のプラグインなどを考えて記事を書き始めましたが、後からvim関係は別に分けた方がいいのではないかと思い、vim関係を書かなくした結果、思ったより記事の内容が薄くなってしまいました。&lt;/p&gt;
&lt;p&gt;まぁ、見てる人そんなにいないし、ここまで見ている人いないから、問題なし！ 安全確認ヨシ！&lt;/p&gt;
</content:encoded></item><item><title>FirebaseのCIデプロイが突然落ちるようになった</title><link>https://masa-dev.net/note/633f007e2c3aa4b59313ccd1/</link><guid isPermaLink="true">https://masa-dev.net/note/633f007e2c3aa4b59313ccd1/</guid><description>本サイトの環境はFirebaseにデプロイしており、GitHub Actionsで自動でデプロイするようにしていますが、突然エラーが発生して落ちるようになりました。</description><pubDate>Thu, 06 Oct 2022 17:08:31 GMT</pubDate><content:encoded>&lt;h2&gt;エラー発生&lt;/h2&gt;
&lt;p&gt;本サイトの環境はFirebaseにデプロイしており、GitHub Actionsで自動でデプロイするようにしていますが、突然エラーが発生して落ちるようになりました。&lt;/p&gt;
&lt;h2&gt;エラー内容&lt;/h2&gt;
&lt;p&gt;エラー内容は以下です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Error: Failed to list functions for *******

The process &apos;/usr/local/bin/npx&apos; failed with exit code 1
Error: The process &apos;/usr/local/bin/npx&apos; failed with exit code 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さすがにさっきのだけじゃあ何もわからないので少し探してみる。&lt;/p&gt;
&lt;h3&gt;エラー1&lt;/h3&gt;
&lt;p&gt;調べると以下のエラーが発生していました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;[2022-10-06T16:20:32.871Z] [functions] HTTP Error: 403, Cloud Functions API has not been used in project 700***** before or it is disabled. Enable it by visiting 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーの少し前になんかそれっぽいことが書いてありますね。「Cloud Functions API」とやらが有効化されていないから有効化しろとのことです。&lt;/p&gt;
&lt;p&gt;とりあえず、GCPにログインして、対象のプロジェクトで「Cloud Functions API」を有効化します。&lt;/p&gt;
&lt;h3&gt;エラー2&lt;/h3&gt;
&lt;p&gt;先ほどのエラーはなくなりましたが、今度は以下のようなエラーが発生。（もともとあったかもしんない）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Error: HTTP Error: 403, Permission &apos;cloudfunctions.functions.list&apos; denied on &apos;projects/**********/locations/-/functions&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;firebaseのバグっぽい？調べると以下のIssueにあたりました。&lt;br&gt;
&lt;a href=&quot;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203&quot;&gt;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一番評価がありそうな解決策を試してみます。&lt;br&gt;
&lt;a href=&quot;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203#issuecomment-1127732956&quot;&gt;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203#issuecomment-1127732956&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;方法は以下の通りです&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「IAMと管理 &amp;gt; IAM」に移動して&lt;code&gt;github-actions&lt;/code&gt;から始まるアカウントを探す&lt;/li&gt;
&lt;li&gt;鉛筆マークで「別のロールを追加」から、&lt;code&gt;Cloud Functions 閲覧者&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;正しいプロジェクトにいるか念のために確認&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;保存してGithubActionsを再実行したところ、うまく動作しました。&lt;/p&gt;
&lt;h2&gt;解決策・まとめ&lt;/h2&gt;
&lt;p&gt;どうやら、GCP関連の権限不足だった模様です。&lt;br&gt;
どうしていきなり発生したのかはわかりません。本日（2022/10/6）にfirebaseから規約変更などのメールはありましたがそれが原因とは思えません。（GithubのIssueは数か月前のもの）&lt;br&gt;
利用からちょうど３か月経とうかというところなので、無料期間外だからでしょうか。&lt;/p&gt;
&lt;p&gt;まぁ、よくわからんけど解決したからヨシ！&lt;/p&gt;
&lt;p&gt;2022/10/7 追記&lt;br&gt;
Issueを追ってみたら、昨日あたりからこのエラーが発生したようです。&lt;br&gt;
具体的な原因についてはわかりませんでした。&lt;/p&gt;
&lt;p&gt;今回の問題は、以下の二つの操作で解決できました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cloud Functions API&lt;/code&gt;の有効化&lt;/li&gt;
&lt;li&gt;アカウントのロール追加&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Vue3のVue Test Utils で地獄をみた（Chart.js部門）</title><link>https://masa-dev.net/note/632f56d68834f719d021b2d6/</link><guid isPermaLink="true">https://masa-dev.net/note/632f56d68834f719d021b2d6/</guid><description>はじめはVuexのストアが問題で発生していると思い込んで、ひたすらモック作成に取り組んでいたけど一向にエラー文が変わらない絶望 そんなこんなで、色々いじくりまわしてるとあることに気づいた</description><pubDate>Sat, 24 Sep 2022 19:13:26 GMT</pubDate><content:encoded>&lt;p&gt;あまり気力がないのでかなり端折って書きます。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vue@3.2.19&lt;/li&gt;
&lt;li&gt;vuex@4.0.2&lt;/li&gt;
&lt;li&gt;chart.js@2.9.4&lt;/li&gt;
&lt;li&gt;@vue/test-utils@2.0.0-rc.15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで関係のなさそうな一般ライブラリが入っているってことは、つまりそういうことなんです。&lt;/p&gt;
&lt;h2&gt;問題の部分&lt;/h2&gt;
&lt;p&gt;本当ならもっと長いけど、問題となった部分はここだけ&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html:src/components/Chart.vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;chart&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;myChart&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import Chart from &amp;quot;chart.js&amp;quot;;
import &amp;quot;chartjs-plugin-colorschemes&amp;quot;;

export default {
  ...略
  methods: {
    drawLineChart() {
      const ctx = document.getElementById(&amp;quot;myChart&amp;quot;);

      // グラフの作成及び設定を指定する
      window.populationChart = new Chart(ctx, {
	    ...略
	  });
    },
  },
  mounted() {
    // グラフの作成
    this.drawLineChart();
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/br&gt;
&lt;pre&gt;&lt;code class=&quot;language-js:tests/unit/Chart.spec.js&quot;&gt;import { shallowMount } from &amp;quot;@vue/test-utils&amp;quot;;
import Chart from &amp;quot;@/components/Chart.vue&amp;quot;;


test(&amp;quot;Chart&amp;quot;, () =&amp;gt; {
  const state = {
	...略
  }

  const $store = {
	...略
  }

  const wrapper = shallowMount(Chart, {
    global: {
      mocks: {
        $store
      }
    }
  })
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;何が起きたのか・エラー内容&lt;/h2&gt;
&lt;p&gt;なんと！こんな素敵なエラーが出てきました✨✨&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;FAIL  tests/unit/PopulationChart.spec.js
 ● Console

console.warn node_modules/@vue/runtime-core/dist/runtime-core.cjs.js:6465
  [Vue warn]: Unhandled error during execution of mounted hook 
	at &amp;lt;PopulationChart ref=&amp;quot;VTU_COMPONENT&amp;quot; &amp;gt; 
	at &amp;lt;VTUROOT&amp;gt;

 ● 

  TypeError: Cannot read property &apos;length&apos; of null
  
  ...略
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;な...何を言っているのかわからねーと思うが、おれも何をされたのかわからなかった...&lt;/p&gt;
&lt;p&gt;どこのことを言っているの分からなかったし、時間をかけて調べても何にも出てこない、マジで&lt;/p&gt;
&lt;p&gt;はじめはVuexのストアが問題で発生していると思い込んで、ひたすらモック作成に取り組んでいたけど一向にエラー文が変わらない絶望...&lt;/p&gt;
&lt;p&gt;そんなこんなで、色々いじくりまわしてるとあることに気づいた&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;TypeError: Cannot read property &apos;length&apos; of null

  at Object.acquireContext (node_modules/chart.js/dist/Chart.js:7756:19)
  at Chart.construct (node_modules/chart.js/dist/Chart.js:9324:26)
  at new Chart (node_modules/chart.js/dist/Chart.js:9311:7)
  at Proxy.drawLineChart (src/components/PopulationChart.vue:760:32)
  at Proxy.mounted (src/components/PopulationChart.vue:816:10)
  ...略
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さっきは略していましたが、よく見ると&lt;code&gt;Chart&lt;/code&gt;やら&lt;code&gt;Context&lt;/code&gt;やら書いてある...&lt;/p&gt;
&lt;p&gt;もしかしてもしかするとこの&lt;code&gt;Chart.js&lt;/code&gt;が問題のパターン？と思い、たくさん調べてみましたよ。&lt;/p&gt;
&lt;p&gt;ライブラリの問題部分を読んでみると、どうやらコンストラクタの引数のcanvasエレメントが問題だった。さらに調べた結果、canvasが表示されきってないとかどうとかで読み込めなかったらしい。／(^o^)＼ﾅﾝﾃｺｯﾀｲ&lt;/p&gt;
&lt;h2&gt;問題の解決方法&lt;/h2&gt;
&lt;p&gt;ということで、数時間かけて問題に対処した結果、コードの修正部分は以下の通りです‼‼‼‼&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/components/Chart.vue&lt;/code&gt;の&lt;code&gt;mounted&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js:src/components/Chart.vue&quot;&gt;  mounted() {
    // this.$nextTickで囲むだけ‼‼‼‼‼‼ 簡単だね‼
    this.$nextTick(function () {
      // グラフの作成
      this.drawLineChart();
    });
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そう、ここだけ‼&lt;/p&gt;
&lt;p&gt;&lt;code&gt;canvas&lt;/code&gt;がマウントされきっていないため、&lt;code&gt;$nextTick&lt;/code&gt;を使ってすべてのコンポーネントがマウントされるのを待ったらいけました。&lt;/p&gt;
&lt;p&gt;というのも、&lt;code&gt;mounted&lt;/code&gt;では子コンポーネント全てをマウントしたことは保証しないらしく、すべてのコンポーネントがマウントされているとは限らないそうです。公式ドキュメントにも普通に書いてあったので参考に載っけときます。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;数時間悩んだ結果2行追加で解決でつらいよ、俺の努力はいったい...&lt;/p&gt;
&lt;p&gt;／(^o^)＼ﾅﾝﾃｺｯﾀｲ&lt;/p&gt;
&lt;p&gt;深夜テンションで書きましたのでもう寝ます( ˘ω˘)ｽﾔｧ&lt;/p&gt;
&lt;p&gt;誤字脱字はゆるしてください&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/chan_kaku/items/7f3233053b0e209ef355#mounted&quot;&gt;Vueのライフサイクルを完全に理解した - Qiita&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://jp.vuejs.org/v2/api/index.html#mounted&quot;&gt;API — Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item></channel></rss>